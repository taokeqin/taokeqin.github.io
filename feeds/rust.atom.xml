<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>陶克勤的博客</title><link href="http://taokeqin.github.io/" rel="alternate"></link><link href="taokeqin.com/feeds%5Crust.atom.xml" rel="self"></link><id>http://taokeqin.github.io/</id><updated>2014-10-14T10:17:00+02:00</updated><entry><title>rust hello world</title><link href="http://taokeqin.github.io/rust-hello.html" rel="alternate"></link><updated>2014-10-14T10:17:00+02:00</updated><author><name>陶克勤</name></author><id>tag:taokeqin.github.io,2014-10-14:rust-hello.html</id><summary type="html">&lt;div class="section" id="hi"&gt;
&lt;h2&gt;HI&lt;/h2&gt;
&lt;p&gt;第一次看到rust这个语言是在一个Lang.Next的视频上，当时有一个对话场景，上面坐着4个人再回答下面的提问！&lt;/p&gt;
&lt;p&gt;这四个人所负责的语言分别是：C++, D, rust, go&lt;/p&gt;
&lt;p&gt;瞬间发现自己居然不知道rust这个语言呢！&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;我为什么想试试这个语言&lt;/h2&gt;
&lt;p&gt;rust定位是系统编程语言，强类型，强调安全，强调并行, 不用GC, 不用异常&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="rust"&gt;
&lt;h2&gt;怎么安装rust&lt;/h2&gt;
&lt;p&gt;目前的安装方式在linux比较暴力，windows还好，直接下载安装包就可以了&lt;/p&gt;
&lt;p&gt;linux:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;curl -s https://static.rust-lang.org/rustup.sh &lt;span class="p"&gt;|&lt;/span&gt; sudo sh
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这个安装脚本是会默认安装两个东西：rust， cargo&lt;/p&gt;
&lt;p&gt;cargo是rust的代码依赖管理和build工具，对于习惯了make，cmake这样工具的人，还是会觉得cargo比较方便些。
后面详细分析一下cargo的使用，目前cargo还在开发阶段，特性不多，容易掌握！&lt;/p&gt;
&lt;p&gt;官方推荐学习,练习rust，一开始就要使用cargo来做工程管理。
所以我在使用过一次rustc后，所有的代码就都用cargo了。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="rustc-hello-world"&gt;
&lt;h2&gt;rustc hello world&lt;/h2&gt;
&lt;p&gt;安装好了编译器之后第一步就来hello world&lt;/p&gt;
&lt;p&gt;新建文件： main.rs&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;fn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nb"&gt;println&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Hello World&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;运行命令进行编译&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$rustc&lt;/span&gt; main.rs
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可以看到生成的二进制文件，直接运行就好了。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="cargo-hello-world"&gt;
&lt;h2&gt;cargo hello world&lt;/h2&gt;
&lt;p&gt;cargo有直接的工程创建模板，或者可以手动按照cargo的约定进行代码布局&lt;/p&gt;
&lt;p&gt;约定的好处就是大家干出来的结果都一样. 不像make，每个人的工程都不一样！&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;cargo new hello_world --bin
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;找一个你放代码的目录，运行上面的命令，cargo就会帮你生成一个工程模板。
看看目录里面都有写什么？&lt;/p&gt;
&lt;p&gt;src里面的源代码，写代码就写在里面！&lt;/p&gt;
&lt;p&gt;Cargo.toml是cargo的配置文件，可以看到，这里没并没有指明有那些源文件？？&lt;/p&gt;
&lt;p&gt;很好奇rustc的编译链接过程？后面详细分析，至少来看比c/c++简化了程序员的决策。&lt;/p&gt;
&lt;p&gt;编译产生二进制运行文件&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;cargo build
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;会生成一个target目录，可执行文件也在里面，直接运行就好了，这样build也很不错，产生的中间文件都在src的外面，代码比较整洁！&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;cargo clean
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;就轻易的清理掉了build的输出，看看目录，target目录消失了！！&lt;/p&gt;
&lt;/div&gt;
</summary><category term="rust"></category><category term="hello"></category></entry></feed>