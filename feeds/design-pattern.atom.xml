<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Tao听途说 - Design Pattern</title><link href="https://hacken.fun/" rel="alternate"></link><link href="https://hacken.fun/feeds/design-pattern.atom.xml" rel="self"></link><id>https://hacken.fun/</id><updated>2023-07-19T00:16:00+02:00</updated><subtitle>把不可能变成可能，把困难变成简单，把简单变成傻瓜，把idea变成现实，一个程序员的旅程</subtitle><subtitle>把不可能变成可能，把困难变成简单，把简单变成傻瓜，把idea变成现实，一个程序员的旅程</subtitle><entry><title>设计模式 Rust 表达-设计原则(SOLID)</title><link href="https://hacken.fun/design-pattern-rust-1.html" rel="alternate"></link><published>2023-07-19T00:16:00+02:00</published><updated>2023-07-19T00:16:00+02:00</updated><author><name>Hacken</name></author><id>tag:hacken.fun,2023-07-19:/design-pattern-rust-1.html</id><summary type="html">&lt;p&gt;复习设计原则 SOLID&lt;/p&gt;</summary><content type="html">&lt;h3&gt;SOLID 具体指的是什么？&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;单一职责，Single Responsibility Principle&lt;/li&gt;
&lt;li&gt;开放封闭, Open Closed Principle&lt;/li&gt;
&lt;li&gt;里式替换, Liskov Substitution Principle&lt;/li&gt;
&lt;li&gt;接口隔离, Interface Segregation Principle&lt;/li&gt;
&lt;li&gt;依赖倒置, Dependency Inversion Principle&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这些原则独立的被列出来，但是他们并不是正交的，反而他们之间是相互依赖的，或者说是相互支撑的，这里的支撑是指如果没有其中的一个原则，那么其他的原则也就不会存在了。而他们都有一个共同的目标&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;编写可复用的可扩展的程序&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这么简短的一句话，在你没有见过大量反面程序的时候，你是无法深刻理解的。什么事反面程序呢？就是你在维护一个程序的时候，你会发现你修改了一个地方，然后另外一个地方就出现了问题，然后你又去修改另外一个地方，然后又出现了问题，这样的修改是没有尽头的，而且你修改的地方越多，你的程序就越不稳定，越不可靠，越不可维护。&lt;/p&gt;
&lt;p&gt;为什么没要接口隔离，我觉得这是对依赖倒置的一个深化或者说细化。在依赖倒置中强调依赖接口而不是具体实现来达到复用性和扩展性。这其实对接口的定义，或者说如何定义出好的接口提出了很高的要求，如果接口定义的不好，老是变化，那也没有达到目的。所以接口隔离原则就是来指导如何更好的定义接口。要求接口的定义要精简单一内聚性好，完备，不要定义过多的接口，而且接口的定义要稳定，不要老是变化。&lt;/p&gt;</content><category term="Design Pattern"></category><category term="design pattern"></category><category term="rust"></category></entry><entry><title>设计模式 Rust 表达</title><link href="https://hacken.fun/design-pattern-rust.html" rel="alternate"></link><published>2023-07-18T00:16:00+02:00</published><updated>2023-07-18T00:16:00+02:00</updated><author><name>Hacken</name></author><id>tag:hacken.fun,2023-07-18:/design-pattern-rust.html</id><summary type="html">&lt;p&gt;如何理解设计模式，并用 Rust 进行表达。&lt;/p&gt;</summary><content type="html">&lt;h3&gt;学习设计模式的目标是什么？&lt;/h3&gt;
&lt;p&gt;在这里不再问为什么学习设计模式，感觉问为什么就是为了要一个答案，而且也显得太宽泛，反而以目标为导向可能是比较简单和具体的。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;如何让程序松耦合&lt;/li&gt;
&lt;li&gt;如何让程序可复用&lt;/li&gt;
&lt;li&gt;如何理解和应用常见的设计模式&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;用 Rust 的目的是什么？&lt;/h3&gt;
&lt;p&gt;没有特殊的目的，只是想用 Rust 来表达一下设计模式，Rust 和 C++在底层思维也是差不多的，而设计模式更多的是抽象层面的思维，所以用 Rust 来表达设计模式应该是比较合适的，正好可以根据李老师的课程设计进行展开。&lt;/p&gt;
&lt;p&gt;传统的设计模式离不开面向对象设计，那么在 Rust 中怎么表达面向对象的编程风格呢？
对比 C++里面的&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;封装&lt;/li&gt;
&lt;li&gt;继承&lt;/li&gt;
&lt;li&gt;多态&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Rust 里面也有对应的概念。如何在程序里面表达这些概念呢？&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;fn，struct/impl 实现封装&lt;/li&gt;
&lt;li&gt;impl &lt;trait&gt; for &lt;struct&gt;， 实现接口继承&lt;/li&gt;
&lt;li&gt;trait object， 实现多态&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;设计模式需要的重要思维&lt;/h3&gt;
&lt;p&gt;在李老师的课程里面提到了两个概念，一个是分治，一个是抽象。
分治是指把一个大问题分解成若干个小问题，然后再把小问题分解成更小的问题，直到问题可以被解决。抽象是指把一个问题抽象成一个模型，然后再把这个模型实现成一个具体的程序。&lt;/p&gt;
&lt;p&gt;这里说“分治”我个人感觉不是最佳的，如果是我会先用用“具体”这个词，这是站在数学的角度，一般我们讨论问都是从具体到一般，这里的一般就是抽象的，泛化的。&lt;/p&gt;
&lt;p&gt;我们是如何得到这个抽象的结果呢？我们是通过观察各个具体的情况，然后归纳规律，进而抽象出来的。这里的观察其实可以说和“分治”结合，把一个大问题分解成若干个小问题，然后再把小问题分解成更小的问题，直到问题可以被解决，在解决一个一个小问题的时候去总结发现其中的共性和规律性的东西。&lt;/p&gt;</content><category term="Design Pattern"></category><category term="design pattern"></category><category term="rust"></category></entry></feed>